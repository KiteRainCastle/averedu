/**
 * @fileoverview COMMON_VARIABLE
 * @COPYRIGHT(C) BY 2017 TOBESOFT.CO.LTD.
 */

/**
 * create namespace variable object
 * @private
*/
createNS("nex.v");
/*●============================
	    COMMON_VARIABLE.xjs
==============================●*/

nex.v.global ={
	
};
nex.v.toString =  (Object.prototype.toString);



/**
* alphabet character code.
* charvalue값 => [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, a, b, c, d, e, f]
* @private
* @constant
*/
nex.v.ALPHA_CHAR_CODES = [48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 97, 98, 99, 100, 101, 102];

/**
* default password character.
* @private
* @memberOf private
*/
nex.v.defaultPassChar = "*";

/**
* mask format cache.
* @private
*/
nex.v.stringMaskCache = {};


/**
* default mask character.
* @private
*/
nex.v.defaultMaskChar = "_";

/**
* password start,end character.
* @private
*/
nex.v.PASSWORD_PAIR = ["{", "}"];

/**
* mask format cache.
* @private
*/
nex.v.stringMaskCache = {};

/* mask character RegExp.
* @private
*/
nex.v.maskChr = { 
   "@" : /[\x20-\x7D]/, // /[\u0020-\u00ff]/,
   "#" : /[0-9]/,
   "*" : /[a-zA-Z]/,
   "9" : /[a-zA-Z0-9]/,
   "A" : /[A-Z]/,
   "a" : /[a-z]/,
   "Z" : /[A-Z0-9]/,
   "z" : /[a-z0-9]/
};

/**
* emtpy string.
* @private
*/		
nex.v.chkEmpty = String.fromCharCode(0x08);
/**
* escapeXML cache.
* @private
*/		
nex.v.cacheEscapeXML = {};
nex.v.formatRegExp = /\{(\d+)\}/g;
nex.v.regExp = /\W/g;
nex.v.regExp2 =/\\/gi;
nex.v.regExp3 = /&/g;
nex.v.regExp4 = /</g;
nex.v.regExp5 = />/g;
nex.v.regExp6 = /'/g;
nex.v.regExp7 = /\"/g;
nex.v.regExp8 = /\t/g;
nex.v.regExp9 = /\r/g;
nex.v.regExp10 = /\n/g;
nex.v.regExp11 = /\b[a-z]/g;
nex.v.regExp12 = /function\s*([\w\-$]+)?\s*\(/i;
nex.v.regExp13 = /\{(\d+)\}/g;


/**
* 요일명칭 정의.<br>
* getMaskFormatString 함수에서 masking 할때 사용하는 명칭이다.<br>
* 필요에 따라 수정 하여 사용한다.
* @example : ["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]
* @public
* @private
*/			
nex.v.weekName = ["일요일", "월요일", "화요일", "수요일", "목요일", "금요일", "토요일"];
//weekName: ["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],				

/**
* 축약 요일명칭 정의.<br>
* getMaskFormatString 함수에서 masking 할때 사용하는 명칭이다.<br>
* 필요에 따라 수정 하여 사용한다.
* @example
* ["Sun","Mon","Tue","Wed","Thu","Fri","Sat"]
* @private
*/	
nex.v.weekShortName = ["일", "월", "화", "수", "목", "금", "토"];
//weekShortName: ["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],		

/**
* 월명칭 정의.<br>
* getMaskFormatString 함수에서 masking 할때 사용하는 명칭이다.<br>
* 필요에 따라 수정 하여 사용한다.
* @example
* ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]
* @private
*/	
nex.v.monthName = ["1월", "2월", "3월", "4월", "5월", "6월", "7월", "8월", "9월", "10월", "11월", "12월"];
//monthName: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],

/**
* 축약 월명칭 정의.<br>
* getMaskFormatString 함수에서 masking 할때 사용하는 명칭이다.<br>
* 필요에 따라 수정 하여 사용한다.
* @example
* ["Jan ", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
* @private
*/	
nex.v.monthShortName = ["1월", "2월", "3월", "4월", "5월", "6월", "7월", "8월", "9월", "10월", "11월", "12월"];
//monthShortName: ["Jan ", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],

/**
* 오전/오후.<br>
* getMaskFormatString 함수에서 masking 할때 사용하는 명칭이다.<br>
* 필요에 따라 수정 하여 사용한다.
* @example
* ["AM", "PM"]
* @private
*/	
nex.v.ttName = ["오전", "오후"];
//ttName: ["AM", "PM"],

/**
* 음력 데이터 (평달 - 작은달 :1,  큰달:2 )
* (윤달이 있는 달 - 평달이 작고 윤달도 작으면 :3 , 평달이 작고 윤달이 크면 : 4)
* (윤달이 있는 달 - 평달이 크고 윤달이 작으면 :5,  평달과 윤달이 모두 크면 : 6)	
* @private
*/			 
nex.v.lunarMonthTable = [
[2, 1, 2, 1, 2, 1, 2, 2, 1, 2, 1, 2],
[1, 2, 1, 1, 2, 1, 2, 5, 2, 2, 1, 2],
[1, 2, 1, 1, 2, 1, 2, 1, 2, 2, 2, 1],   /* 1901 */
[2, 1, 2, 1, 1, 2, 1, 2, 1, 2, 2, 2],
[1, 2, 1, 2, 3, 2, 1, 1, 2, 2, 1, 2],
[2, 2, 1, 2, 1, 1, 2, 1, 1, 2, 2, 1],
[2, 2, 1, 2, 2, 1, 1, 2, 1, 2, 1, 2],
[1, 2, 2, 4, 1, 2, 1, 2, 1, 2, 1, 2],
[1, 2, 1, 2, 1, 2, 2, 1, 2, 1, 2, 1],
[2, 1, 1, 2, 2, 1, 2, 1, 2, 2, 1, 2],
[1, 5, 1, 2, 1, 2, 1, 2, 2, 2, 1, 2],
[1, 2, 1, 1, 2, 1, 2, 1, 2, 2, 2, 1],
[2, 1, 2, 1, 1, 5, 1, 2, 2, 1, 2, 2],   /* 1911 */
[2, 1, 2, 1, 1, 2, 1, 1, 2, 2, 1, 2],
[2, 2, 1, 2, 1, 1, 2, 1, 1, 2, 1, 2],
[2, 2, 1, 2, 5, 1, 2, 1, 2, 1, 1, 2],
[2, 1, 2, 2, 1, 2, 1, 2, 1, 2, 1, 2],
[1, 2, 1, 2, 1, 2, 2, 1, 2, 1, 2, 1],
[2, 3, 2, 1, 2, 2, 1, 2, 2, 1, 2, 1],
[2, 1, 1, 2, 1, 2, 1, 2, 2, 2, 1, 2],
[1, 2, 1, 1, 2, 1, 5, 2, 2, 1, 2, 2],
[1, 2, 1, 1, 2, 1, 1, 2, 2, 1, 2, 2],
[2, 1, 2, 1, 1, 2, 1, 1, 2, 1, 2, 2],   /* 1921 */
[2, 1, 2, 2, 3, 2, 1, 1, 2, 1, 2, 2],
[1, 2, 2, 1, 2, 1, 2, 1, 2, 1, 1, 2],
[2, 1, 2, 1, 2, 2, 1, 2, 1, 2, 1, 1],
[2, 1, 2, 5, 2, 1, 2, 2, 1, 2, 1, 2],
[1, 1, 2, 1, 2, 1, 2, 2, 1, 2, 2, 1],
[2, 1, 1, 2, 1, 2, 1, 2, 2, 1, 2, 2],
[1, 5, 1, 2, 1, 1, 2, 2, 1, 2, 2, 2],
[1, 2, 1, 1, 2, 1, 1, 2, 1, 2, 2, 2],
[1, 2, 2, 1, 1, 5, 1, 2, 1, 2, 2, 1],
[2, 2, 2, 1, 1, 2, 1, 1, 2, 1, 2, 1],   /* 1931 */
[2, 2, 2, 1, 2, 1, 2, 1, 1, 2, 1, 2],
[1, 2, 2, 1, 6, 1, 2, 1, 2, 1, 1, 2],
[1, 2, 1, 2, 2, 1, 2, 2, 1, 2, 1, 2],
[1, 1, 2, 1, 2, 1, 2, 2, 1, 2, 2, 1],
[2, 1, 4, 1, 2, 1, 2, 1, 2, 2, 2, 1],
[2, 1, 1, 2, 1, 1, 2, 1, 2, 2, 2, 1],
[2, 2, 1, 1, 2, 1, 4, 1, 2, 2, 1, 2],
[2, 2, 1, 1, 2, 1, 1, 2, 1, 2, 1, 2],
[2, 2, 1, 2, 1, 2, 1, 1, 2, 1, 2, 1],
[2, 2, 1, 2, 2, 4, 1, 1, 2, 1, 2, 1],   /* 1941 */
[2, 1, 2, 2, 1, 2, 2, 1, 2, 1, 1, 2],
[1, 2, 1, 2, 1, 2, 2, 1, 2, 2, 1, 2],
[1, 1, 2, 4, 1, 2, 1, 2, 2, 1, 2, 2],
[1, 1, 2, 1, 1, 2, 1, 2, 2, 2, 1, 2],
[2, 1, 1, 2, 1, 1, 2, 1, 2, 2, 1, 2],
[2, 5, 1, 2, 1, 1, 2, 1, 2, 1, 2, 2],
[2, 1, 2, 1, 2, 1, 1, 2, 1, 2, 1, 2],
[2, 2, 1, 2, 1, 2, 3, 2, 1, 2, 1, 2],
[2, 1, 2, 2, 1, 2, 1, 1, 2, 1, 2, 1],
[2, 1, 2, 2, 1, 2, 1, 2, 1, 2, 1, 2],   /* 1951 */
[1, 2, 1, 2, 4, 2, 1, 2, 1, 2, 1, 2],
[1, 2, 1, 1, 2, 2, 1, 2, 2, 1, 2, 2],
[1, 1, 2, 1, 1, 2, 1, 2, 2, 1, 2, 2],
[2, 1, 4, 1, 1, 2, 1, 2, 1, 2, 2, 2],
[1, 2, 1, 2, 1, 1, 2, 1, 2, 1, 2, 2],
[2, 1, 2, 1, 2, 1, 1, 5, 2, 1, 2, 2],
[1, 2, 2, 1, 2, 1, 1, 2, 1, 2, 1, 2],
[1, 2, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1],
[2, 1, 2, 1, 2, 5, 2, 1, 2, 1, 2, 1],
[2, 1, 2, 1, 2, 1, 2, 2, 1, 2, 1, 2],   /* 1961 */
[1, 2, 1, 1, 2, 1, 2, 2, 1, 2, 2, 1],
[2, 1, 2, 3, 2, 1, 2, 1, 2, 2, 2, 1],
[2, 1, 2, 1, 1, 2, 1, 2, 1, 2, 2, 2],
[1, 2, 1, 2, 1, 1, 2, 1, 1, 2, 2, 2],
[1, 2, 5, 2, 1, 1, 2, 1, 1, 2, 2, 1],
[2, 2, 1, 2, 2, 1, 1, 2, 1, 2, 1, 2],
[1, 2, 2, 1, 2, 1, 5, 2, 1, 2, 1, 2],
[1, 2, 1, 2, 1, 2, 2, 1, 2, 1, 2, 1],
[2, 1, 1, 2, 2, 1, 2, 1, 2, 2, 1, 2],
[1, 2, 1, 1, 5, 2, 1, 2, 2, 2, 1, 2],   /* 1971 */
[1, 2, 1, 1, 2, 1, 2, 1, 2, 2, 2, 1],
[2, 1, 2, 1, 1, 2, 1, 1, 2, 2, 2, 1],
[2, 2, 1, 5, 1, 2, 1, 1, 2, 2, 1, 2],
[2, 2, 1, 2, 1, 1, 2, 1, 1, 2, 1, 2],
[2, 2, 1, 2, 1, 2, 1, 5, 2, 1, 1, 2],
[2, 1, 2, 2, 1, 2, 1, 2, 1, 2, 1, 1],
[2, 2, 1, 2, 1, 2, 2, 1, 2, 1, 2, 1],
[2, 1, 1, 2, 1, 6, 1, 2, 2, 1, 2, 1],
[2, 1, 1, 2, 1, 2, 1, 2, 2, 1, 2, 2],
[1, 2, 1, 1, 2, 1, 1, 2, 2, 1, 2, 2],   /* 1981 */
[2, 1, 2, 3, 2, 1, 1, 2, 2, 1, 2, 2],
[2, 1, 2, 1, 1, 2, 1, 1, 2, 1, 2, 2],
[2, 1, 2, 2, 1, 1, 2, 1, 1, 5, 2, 2],
[1, 2, 2, 1, 2, 1, 2, 1, 1, 2, 1, 2],
[1, 2, 2, 1, 2, 2, 1, 2, 1, 2, 1, 1],
[2, 1, 2, 2, 1, 5, 2, 2, 1, 2, 1, 2],
[1, 1, 2, 1, 2, 1, 2, 2, 1, 2, 2, 1],
[2, 1, 1, 2, 1, 2, 1, 2, 2, 1, 2, 2],
[1, 2, 1, 1, 5, 1, 2, 1, 2, 2, 2, 2],
[1, 2, 1, 1, 2, 1, 1, 2, 1, 2, 2, 2],   /* 1991 */
[1, 2, 2, 1, 1, 2, 1, 1, 2, 1, 2, 2],
[1, 2, 5, 2, 1, 2, 1, 1, 2, 1, 2, 1],
[2, 2, 2, 1, 2, 1, 2, 1, 1, 2, 1, 2],
[1, 2, 2, 1, 2, 2, 1, 5, 2, 1, 1, 2],
[1, 2, 1, 2, 2, 1, 2, 1, 2, 2, 1, 2],
[1, 1, 2, 1, 2, 1, 2, 2, 1, 2, 2, 1],
[2, 1, 1, 2, 3, 2, 2, 1, 2, 2, 2, 1],
[2, 1, 1, 2, 1, 1, 2, 1, 2, 2, 2, 1],
[2, 2, 1, 1, 2, 1, 1, 2, 1, 2, 2, 1],
[2, 2, 2, 3, 2, 1, 1, 2, 1, 2, 1, 2],   /* 2001 */
[2, 2, 1, 2, 1, 2, 1, 1, 2, 1, 2, 1],
[2, 2, 1, 2, 2, 1, 2, 1, 1, 2, 1, 2],
[1, 5, 2, 2, 1, 2, 1, 2, 1, 2, 1, 2],
[1, 2, 1, 2, 1, 2, 2, 1, 2, 2, 1, 1],
[2, 1, 2, 1, 2, 1, 5, 2, 2, 1, 2, 2],
[1, 1, 2, 1, 1, 2, 1, 2, 2, 2, 1, 2],
[2, 1, 1, 2, 1, 1, 2, 1, 2, 2, 1, 2],
[2, 2, 1, 1, 5, 1, 2, 1, 2, 1, 2, 2],
[2, 1, 2, 1, 2, 1, 1, 2, 1, 2, 1, 2],
[2, 1, 2, 2, 1, 2, 1, 1, 2, 1, 2, 1],   /* 2011 */
[2, 1, 6, 2, 1, 2, 1, 1, 2, 1, 2, 1],
[2, 1, 2, 2, 1, 2, 1, 2, 1, 2, 1, 2],
[1, 2, 1, 2, 1, 2, 1, 2, 5, 2, 1, 2],
[1, 2, 1, 1, 2, 1, 2, 2, 2, 1, 2, 1],
[2, 1, 2, 1, 1, 2, 1, 2, 2, 1, 2, 2],
[2, 1, 1, 2, 3, 2, 1, 2, 1, 2, 2, 2],
[1, 2, 1, 2, 1, 1, 2, 1, 2, 1, 2, 2],
[2, 1, 2, 1, 2, 1, 1, 2, 1, 2, 1, 2],
[2, 1, 2, 5, 2, 1, 1, 2, 1, 2, 1, 2],
[1, 2, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1],   /* 2021 */
[2, 1, 2, 1, 2, 2, 1, 2, 1, 2, 1, 2],
[1, 5, 2, 1, 2, 1, 2, 2, 1, 2, 1, 2],
[1, 2, 1, 1, 2, 1, 2, 2, 1, 2, 2, 1],
[2, 1, 2, 1, 1, 5, 2, 1, 2, 2, 2, 1],
[2, 1, 2, 1, 1, 2, 1, 2, 1, 2, 2, 2],
[1, 2, 1, 2, 1, 1, 2, 1, 1, 2, 2, 2],
[1, 2, 2, 1, 5, 1, 2, 1, 1, 2, 2, 1],
[2, 2, 1, 2, 2, 1, 1, 2, 1, 1, 2, 2],
[1, 2, 1, 2, 2, 1, 2, 1, 2, 1, 2, 1],
[2, 1, 5, 2, 1, 2, 2, 1, 2, 1, 2, 1],   /* 2031 */
[2, 1, 1, 2, 1, 2, 2, 1, 2, 2, 1, 2],
[1, 2, 1, 1, 2, 1, 2, 1, 2, 2, 5, 2],
[1, 2, 1, 1, 2, 1, 2, 1, 2, 2, 2, 1],
[2, 1, 2, 1, 1, 2, 1, 1, 2, 2, 1, 2],
[2, 2, 1, 2, 1, 4, 1, 1, 2, 2, 1, 2],
[2, 2, 1, 2, 1, 1, 2, 1, 1, 2, 1, 2],
[2, 2, 1, 2, 1, 2, 1, 2, 1, 1, 2, 1],
[2, 2, 1, 2, 5, 2, 1, 2, 1, 2, 1, 1],
[2, 1, 2, 2, 1, 2, 2, 1, 2, 1, 2, 1],
[2, 1, 1, 2, 1, 2, 2, 1, 2, 2, 1, 2],   /* 2041 */
[1, 5, 1, 2, 1, 2, 1, 2, 2, 2, 1, 2],
[1, 2, 1, 1, 2, 1, 1, 2, 2, 1, 2, 2]
];

/**
* 월별 일자 Offset.
* @private
*/
nex.v.dayOfYearOffset = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334];
/**
* mask format cache.
* @private
*/
nex.v.dateMaskCache = {};

/**
* 소수점 표시자 (locale에 따라 정의)
* @private
* @type string
* @example "." ==> "0.01"
*/
nex.v.point = ".";

/**
* 숫자 단위 구분 표시자 (locale에 따라 정의)
* @private
* @type string
* @example "," ==> "1,234"
*/		
nex.v.separator = ",";

/**
* 통화 표시에서 separator 규칙 정의 (locale에 따라 정의)
* @private
* @type string
* @example 
*  "\\3" ==> 10,000,000 
*  "\\1\\2\\3" ==> 1,000,00,0 
*  "\\3\\1" ==> 1,0,0,0,000
*/			
nex.v.separatorGrouping = "\\3";

/**
* mask format cache.
* @private
*/
nex.v.numberMaskCache = {};		

/**
* query 메소드의 where 조건 cache
* @private
*/
nex.v.parseQueryCache = [];

nex.v.operators = {
   // ==
   "equal" : function(a, v , p){
	   
	   if (nexutil.isEmpty(v))
	   {
		   return nexutil.isEmpty(a);
	   }

	   return a == v;
   },
   // !=
   "notEqual" : function(a, v, p){
	   return a != v;
   },
   // >
   "greaterThan" : function(a, v, p){
	   return a > v;
   },
   // >=
   "greaterThanEqual" : function(a, v, p){
	   return a >= v;
   },
   // <
   "lessThan" : function(a, v, p){
	   return a < v;
   },
   // <=
   "lessThanEqual" : function(a, v, p){
	   return a <= v;
   },
   // *=
   "contains" : function(a, v, p){
	   return a && a.indexOf(v) > -1;
   },
   // ^=
   "startWith" : function(a, v, p){
	   return a && a.substr(0, v.length) == v;
   },
   // $=
   "endWith" : function(a, v, p){
	   return a && a.substr(a.length-v.length) == v;
   }
};
	   
/*●============================
	   COM_GRID.xjs
==============================●*/
/**
* sort header title 
* @private
*/



